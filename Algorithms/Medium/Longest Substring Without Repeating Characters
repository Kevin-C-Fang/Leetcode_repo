# Kevin Fang
# 08/25/2021
# Longest Substring Without Repeating Characters
# https://leetcode.com/problems/longest-substring-without-repeating-characters/

""" First solution: Implemented using recursion, but time limit exceeded
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        characters = []
        # Problem, substring may not always start at front
        # and may not always have a larger substring after the first.
        # currently code does not account for either
        if len(s) == 0:
            return 0
        for x in s:
            if x in characters:
                # Do a recursion call of the substring and compare length with original
                longest = self.lengthOfLongestSubstring(s[(len(characters)):])
                check_middle = self.lengthOfLongestSubstring(s[s.find(x) + 1:])
                if len(characters) > longest and len(characters) > check_middle:
                    return len(characters)
                elif longest > check_middle:
                    return longest
                else:
                    return check_middle
            
            characters.append(x)
            
        return len(characters)
"""
